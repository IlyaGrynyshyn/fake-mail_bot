import logging
import json
import asyncio
import sqlite3
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import API_TOKEN, admin
import keyboard as kb
from onesec_api import Mailbox


storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)


connection = sqlite3.connect('data.db')
q = connection.cursor()

q.execute('CREATE TABLE IF NOT EXISTS users (user_id integer)')
connection.commit()


class sender(StatesGroup):
    text = State()


@dp.message_handler(content_types=['text'], text='‚úâÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—à—Ç—É')
async def takeamail(m: types.Message):
    ma = Mailbox('')
    email = f'{ma._mailbox_}@1secmail.com'
    await m.answer(
        'üì´ –û—Å—å —Ç–≤–æ—è –ø–æ—à—Ç–∞: {}\n–ù–∞–¥—Å–∏–ª–∞–π –ª–∏—Å—Ç–∞.\n'
        '–ü–æ—à—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥, —è–∫—â–æ –ø—Ä–∏–π–¥–µ –Ω–æ–≤–∏–π –ª–∏—Å—Ç, –º–∏ –≤–∞—Å –ø—Ä–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ!\n\n'
        '<b>–ü—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø–æ—à—Ç–∏ ‚Äì 10 —Ö–≤–∏–ª–∏–Ω!</b>'.format(email), parse_mode='HTML')
    timeout = 600
    timer = {}
    timeout_start = time.time()
    while time.time() < timeout_start + timeout:
        test = 0
        if test == 5:
            break
        test -= 1
        mb = ma.filtred_mail()
        if mb != 'not found':
            for i in mb:
                if i not in timer:
                    timer[i] = i
                    if isinstance(mb, list):
                        mf = ma.mailjobs('read', mb[0])
                        js = mf.json()
                        fromm = js['from']
                        theme = js['subject']
                        mes = js['textBody']
                        await m.answer(f'üì© –ù–æ–≤–∏–π –ª–∏—Å—Ç:\n<b>–û—Ç</b>: {fromm}\n<b>–¢–µ–º–∞</b>: {theme}\n<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>: {mes}', reply_markup=kb.menu, parse_mode='HTML')
                        continue
        await asyncio.sleep(5)


@dp.message_handler(content_types=['text'], text='üîê –í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–∞—Ä–æ–ª—å')
async def randompass(m: types.Message):
    ma = Mailbox('')
    passw = ma.rand_pass_for()
    await m.answer(f'üîë –Ø –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ –¥–ª—è —Ç–µ–±–µ –ø–∞—Ä–æ–ª—å, —Ç—Ä–∏–º–∞–π: `{passw}`\n\n*–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω—ñ–∫–æ–º—É –Ω–µ –≤–∏–¥–Ω–æ, –º–æ–∂–µ—à –Ω–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏—Å—è*', parse_mode='MarkdownV2')


@dp.message_handler(commands=['admin'])
async def adminstration(m: types.Message):
    if m.chat.id == admin:
        await m.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=kb.apanel)
    else:
        await m.answer('–ß–æ—Ä—Ç! –¢–∏ –º–µ–Ω–µ –∑–ª–∞–º–∞–≤ :(')


@dp.message_handler(content_types=['text'])
async def texthandler(m: types.Message):
    q.execute(f"SELECT * FROM users WHERE user_id = {m.chat.id}")
    result = q.fetchall()
    if len(result) == 0:
        uid = 'user_id'
        sql = 'INSERT INTO users ({}) VALUES ({})'.format(uid, m.chat.id)
        q.execute(sql)
        connection.commit()
    await m.answer(f'–í—ñ—Ç–∞—é —Ç–µ–±–µ, {m.from_user.mention}\n–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –ø–æ—à—Ç–∏.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ üëá', reply_markup=kb.menu)


@dp.callback_query_handler(text='stats')
async def statistics(call):
    row = q.execute('SELECT * FROM users').fetchall()
    lenght = len(row)
    await call.message.answer('–£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {}'.format(lenght))


@dp.callback_query_handler(text='rass')
async def usender(call):
    await call.message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá', reply_markup=kb.back)
    await sender.text.set()


@dp.message_handler(state=sender.text)
async def process_name(message: types.Message, state: FSMContext):
    info = q.execute('SELECT user_id FROM users').fetchall()
    if message.text == '–í—ñ–¥–º—ñ–Ω–∞':
        await message.answer('–í—ñ–¥–º—ñ–Ω–∞! –ü–æ–≤–µ—Ä—Ç–∞—é –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', reply_markup=kb.menu)
        await state.finish()
    else:
        await message.answer('–ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...', reply_markup=kb.menu)
        for i in range(len(info)):
            try:
                await bot.send_message(info[i][0], str(message.text))
            except:
                pass
        await message.answer('–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)  # –ó–∞–ø—É—Å–∫
